/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';


declare global {

  namespace StencilComponents {
    interface GiApp {

    }
  }

  interface HTMLGiAppElement extends StencilComponents.GiApp, HTMLStencilElement {}

  var HTMLGiAppElement: {
    prototype: HTMLGiAppElement;
    new (): HTMLGiAppElement;
  };
  interface HTMLElementTagNameMap {
    'gi-app': HTMLGiAppElement;
  }
  interface ElementTagNameMap {
    'gi-app': HTMLGiAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-app': JSXElements.GiAppAttributes;
    }
  }
  namespace JSXElements {
    export interface GiAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiCheckbox {
      'checked': boolean;
      'label': string;
      'name': string;
      'slider': boolean;
      'tabindex': number;
      'toggle': boolean;
    }
  }

  interface HTMLGiCheckboxElement extends StencilComponents.GiCheckbox, HTMLStencilElement {}

  var HTMLGiCheckboxElement: {
    prototype: HTMLGiCheckboxElement;
    new (): HTMLGiCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    'gi-checkbox': HTMLGiCheckboxElement;
  }
  interface ElementTagNameMap {
    'gi-checkbox': HTMLGiCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-checkbox': JSXElements.GiCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface GiCheckboxAttributes extends HTMLAttributes {
      'checked'?: boolean;
      'label'?: string;
      'name'?: string;
      'slider'?: boolean;
      'tabindex'?: number;
      'toggle'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiDropdownItem {
      'active': boolean;
      'text': string;
      'value': any;
    }
  }

  interface HTMLGiDropdownItemElement extends StencilComponents.GiDropdownItem, HTMLStencilElement {}

  var HTMLGiDropdownItemElement: {
    prototype: HTMLGiDropdownItemElement;
    new (): HTMLGiDropdownItemElement;
  };
  interface HTMLElementTagNameMap {
    'gi-dropdown-item': HTMLGiDropdownItemElement;
  }
  interface ElementTagNameMap {
    'gi-dropdown-item': HTMLGiDropdownItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-dropdown-item': JSXElements.GiDropdownItemAttributes;
    }
  }
  namespace JSXElements {
    export interface GiDropdownItemAttributes extends HTMLAttributes {
      'active'?: boolean;
      'text'?: string;
      'value'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiDropdown {
      'name': string;
      'openOnFocus': boolean;
      'selection': boolean;
      'text': string;
      'value': any;
    }
  }

  interface HTMLGiDropdownElement extends StencilComponents.GiDropdown, HTMLStencilElement {}

  var HTMLGiDropdownElement: {
    prototype: HTMLGiDropdownElement;
    new (): HTMLGiDropdownElement;
  };
  interface HTMLElementTagNameMap {
    'gi-dropdown': HTMLGiDropdownElement;
  }
  interface ElementTagNameMap {
    'gi-dropdown': HTMLGiDropdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-dropdown': JSXElements.GiDropdownAttributes;
    }
  }
  namespace JSXElements {
    export interface GiDropdownAttributes extends HTMLAttributes {
      'name'?: string;
      'onInput'?: (event: CustomEvent) => void;
      'openOnFocus'?: boolean;
      'selection'?: boolean;
      'text'?: string;
      'value'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiHeader {

    }
  }

  interface HTMLGiHeaderElement extends StencilComponents.GiHeader, HTMLStencilElement {}

  var HTMLGiHeaderElement: {
    prototype: HTMLGiHeaderElement;
    new (): HTMLGiHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'gi-header': HTMLGiHeaderElement;
  }
  interface ElementTagNameMap {
    'gi-header': HTMLGiHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-header': JSXElements.GiHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface GiHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiInputs {

    }
  }

  interface HTMLGiInputsElement extends StencilComponents.GiInputs, HTMLStencilElement {}

  var HTMLGiInputsElement: {
    prototype: HTMLGiInputsElement;
    new (): HTMLGiInputsElement;
  };
  interface HTMLElementTagNameMap {
    'gi-inputs': HTMLGiInputsElement;
  }
  interface ElementTagNameMap {
    'gi-inputs': HTMLGiInputsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-inputs': JSXElements.GiInputsAttributes;
    }
  }
  namespace JSXElements {
    export interface GiInputsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiLeftMenu {

    }
  }

  interface HTMLGiLeftMenuElement extends StencilComponents.GiLeftMenu, HTMLStencilElement {}

  var HTMLGiLeftMenuElement: {
    prototype: HTMLGiLeftMenuElement;
    new (): HTMLGiLeftMenuElement;
  };
  interface HTMLElementTagNameMap {
    'gi-left-menu': HTMLGiLeftMenuElement;
  }
  interface ElementTagNameMap {
    'gi-left-menu': HTMLGiLeftMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-left-menu': JSXElements.GiLeftMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface GiLeftMenuAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PageCheckboxes {

    }
  }

  interface HTMLPageCheckboxesElement extends StencilComponents.PageCheckboxes, HTMLStencilElement {}

  var HTMLPageCheckboxesElement: {
    prototype: HTMLPageCheckboxesElement;
    new (): HTMLPageCheckboxesElement;
  };
  interface HTMLElementTagNameMap {
    'page-checkboxes': HTMLPageCheckboxesElement;
  }
  interface ElementTagNameMap {
    'page-checkboxes': HTMLPageCheckboxesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-checkboxes': JSXElements.PageCheckboxesAttributes;
    }
  }
  namespace JSXElements {
    export interface PageCheckboxesAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PageDropdowns {

    }
  }

  interface HTMLPageDropdownsElement extends StencilComponents.PageDropdowns, HTMLStencilElement {}

  var HTMLPageDropdownsElement: {
    prototype: HTMLPageDropdownsElement;
    new (): HTMLPageDropdownsElement;
  };
  interface HTMLElementTagNameMap {
    'page-dropdowns': HTMLPageDropdownsElement;
  }
  interface ElementTagNameMap {
    'page-dropdowns': HTMLPageDropdownsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-dropdowns': JSXElements.PageDropdownsAttributes;
    }
  }
  namespace JSXElements {
    export interface PageDropdownsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PageHome {

    }
  }

  interface HTMLPageHomeElement extends StencilComponents.PageHome, HTMLStencilElement {}

  var HTMLPageHomeElement: {
    prototype: HTMLPageHomeElement;
    new (): HTMLPageHomeElement;
  };
  interface HTMLElementTagNameMap {
    'page-home': HTMLPageHomeElement;
  }
  interface ElementTagNameMap {
    'page-home': HTMLPageHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-home': JSXElements.PageHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface PageHomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PageNotFound {

    }
  }

  interface HTMLPageNotFoundElement extends StencilComponents.PageNotFound, HTMLStencilElement {}

  var HTMLPageNotFoundElement: {
    prototype: HTMLPageNotFoundElement;
    new (): HTMLPageNotFoundElement;
  };
  interface HTMLElementTagNameMap {
    'page-not-found': HTMLPageNotFoundElement;
  }
  interface ElementTagNameMap {
    'page-not-found': HTMLPageNotFoundElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-not-found': JSXElements.PageNotFoundAttributes;
    }
  }
  namespace JSXElements {
    export interface PageNotFoundAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
