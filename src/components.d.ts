/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';


declare global {

  namespace StencilComponents {
    interface GiApp {

    }
  }

  interface HTMLGiAppElement extends StencilComponents.GiApp, HTMLStencilElement {}

  var HTMLGiAppElement: {
    prototype: HTMLGiAppElement;
    new (): HTMLGiAppElement;
  };
  interface HTMLElementTagNameMap {
    'gi-app': HTMLGiAppElement;
  }
  interface ElementTagNameMap {
    'gi-app': HTMLGiAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-app': JSXElements.GiAppAttributes;
    }
  }
  namespace JSXElements {
    export interface GiAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiDropdowns {

    }
  }

  interface HTMLGiDropdownsElement extends StencilComponents.GiDropdowns, HTMLStencilElement {}

  var HTMLGiDropdownsElement: {
    prototype: HTMLGiDropdownsElement;
    new (): HTMLGiDropdownsElement;
  };
  interface HTMLElementTagNameMap {
    'gi-dropdowns': HTMLGiDropdownsElement;
  }
  interface ElementTagNameMap {
    'gi-dropdowns': HTMLGiDropdownsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-dropdowns': JSXElements.GiDropdownsAttributes;
    }
  }
  namespace JSXElements {
    export interface GiDropdownsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiHeader {

    }
  }

  interface HTMLGiHeaderElement extends StencilComponents.GiHeader, HTMLStencilElement {}

  var HTMLGiHeaderElement: {
    prototype: HTMLGiHeaderElement;
    new (): HTMLGiHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'gi-header': HTMLGiHeaderElement;
  }
  interface ElementTagNameMap {
    'gi-header': HTMLGiHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-header': JSXElements.GiHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface GiHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiInputs {

    }
  }

  interface HTMLGiInputsElement extends StencilComponents.GiInputs, HTMLStencilElement {}

  var HTMLGiInputsElement: {
    prototype: HTMLGiInputsElement;
    new (): HTMLGiInputsElement;
  };
  interface HTMLElementTagNameMap {
    'gi-inputs': HTMLGiInputsElement;
  }
  interface ElementTagNameMap {
    'gi-inputs': HTMLGiInputsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-inputs': JSXElements.GiInputsAttributes;
    }
  }
  namespace JSXElements {
    export interface GiInputsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiLeftMenu {

    }
  }

  interface HTMLGiLeftMenuElement extends StencilComponents.GiLeftMenu, HTMLStencilElement {}

  var HTMLGiLeftMenuElement: {
    prototype: HTMLGiLeftMenuElement;
    new (): HTMLGiLeftMenuElement;
  };
  interface HTMLElementTagNameMap {
    'gi-left-menu': HTMLGiLeftMenuElement;
  }
  interface ElementTagNameMap {
    'gi-left-menu': HTMLGiLeftMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-left-menu': JSXElements.GiLeftMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface GiLeftMenuAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PageContact {

    }
  }

  interface HTMLPageContactElement extends StencilComponents.PageContact, HTMLStencilElement {}

  var HTMLPageContactElement: {
    prototype: HTMLPageContactElement;
    new (): HTMLPageContactElement;
  };
  interface HTMLElementTagNameMap {
    'page-contact': HTMLPageContactElement;
  }
  interface ElementTagNameMap {
    'page-contact': HTMLPageContactElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-contact': JSXElements.PageContactAttributes;
    }
  }
  namespace JSXElements {
    export interface PageContactAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PageHome {

    }
  }

  interface HTMLPageHomeElement extends StencilComponents.PageHome, HTMLStencilElement {}

  var HTMLPageHomeElement: {
    prototype: HTMLPageHomeElement;
    new (): HTMLPageHomeElement;
  };
  interface HTMLElementTagNameMap {
    'page-home': HTMLPageHomeElement;
  }
  interface ElementTagNameMap {
    'page-home': HTMLPageHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-home': JSXElements.PageHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface PageHomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PageNotFound {

    }
  }

  interface HTMLPageNotFoundElement extends StencilComponents.PageNotFound, HTMLStencilElement {}

  var HTMLPageNotFoundElement: {
    prototype: HTMLPageNotFoundElement;
    new (): HTMLPageNotFoundElement;
  };
  interface HTMLElementTagNameMap {
    'page-not-found': HTMLPageNotFoundElement;
  }
  interface ElementTagNameMap {
    'page-not-found': HTMLPageNotFoundElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-not-found': JSXElements.PageNotFoundAttributes;
    }
  }
  namespace JSXElements {
    export interface PageNotFoundAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
